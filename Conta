import java.io.FileInputStream;
import java.io.ObjectInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.io.*;


public abstract class Conta implements ITaxas, Serializable {
   private static final long serialVersionUID = 1L;
   private int numero;


   private Cliente dono;


   private double saldo;


   protected double limite;
   private String agencia;


   private List<Operacao> operacoes;


   private static int totalContas = 0;


   public Conta(int numero, Cliente dono, double saldo, double limite, String agencia) {
       this.numero = numero;
       this.dono = dono;
       this.saldo = saldo;
       this.limite = limite;
       this.agencia = agencia;


       this.operacoes = new ArrayList<>();


       Conta.totalContas++;
   }


   public boolean sacar(double valor) {
       if (valor >= 0 && valor <= this.limite) {
           this.saldo -= valor;
           this.operacoes.add(new OperacaoSaque(valor));
           return true;
       }


       return false;
   }


   public void depositar(double valor) throws ArithmeticException {
       if (valor < 0)
           throw new ArithmeticException("Erro. Valor negativo depositado.");


       this.saldo += valor;
       this.operacoes.add(new OperacaoDeposito(valor));
   }


   public boolean transferir(Conta destino, double valor) {
       boolean valorSacado = this.sacar(valor);
       if (valorSacado) {
           destino.depositar(valor);
           return true;
       }
       return false;
   }


   @Override
   public String toString() {
       return dono.toString() + '\n' +
               "---\n" +
               "numero=" + numero + '\n' +
               "saldo=" + saldo + '\n' +
               "limite=" + limite;
   }


   @Override
   public boolean equals(Object o) {
       if (this == o)
           return true;
       if (o instanceof Conta) {
           Conta conta = (Conta) o;
           return numero == conta.numero;
       }
       return false;
   }


   public void imprimirExtrato(int modo) {
       // realiza a cópia para não perder a ordem original da lista
       List<Operacao> operacoesParaExtrato = new ArrayList<>(this.operacoes);


       // Ordena de modo == 1, caso contrário mantém ordem original
       if (modo == 1) {
           Collections.sort(operacoesParaExtrato);
       }


       System.out.println("======= Extrato Conta " + this.numero + "======");
       for(Operacao atual : operacoesParaExtrato) {
           System.out.println(atual);
       }
       System.out.println("====================");
   }


   public void imprimirExtratoTaxas() {
       System.out.println("=== Extrato de Taxas ===");
       System.out.printf("Manutenção:\t%.2f\n", this.calcularTaxas());


       double totalTaxas = this.calcularTaxas();
       for (Operacao atual : this.operacoes) {
           totalTaxas += atual.calcularTaxas();
           System.out.printf("%c:\t%.2f\n", atual.getTipo(), atual.calcularTaxas());
       }


       System.out.printf("Total:\t%.2f\n", totalTaxas);
   }


   public int getNumero() {
       return numero;
   }


   public Cliente getDono() {
       return dono;
   }


   public double getSaldo() {
       return saldo;
   }


   public double getLimite() {
       return limite;
   }


   public String getAgencia() {
       return agencia;
   }


   public static int getTotalContas() {
       return Conta.totalContas;
   }


   public void setNumero(int numero) {
       this.numero = numero;
   }


   public void setDono(Cliente dono) {
       this.dono = dono;
   }


   public abstract void setLimite(double limite);


   public void salvarEmArquivo() {
       String nomeArquivo = agencia + "-" + numero + ".ser";


       try {
           FileOutputStream fileOut = new FileOutputStream(nomeArquivo);
           ObjectOutputStream out = new ObjectOutputStream(fileOut);
           out.writeObject(this);
           out.close();
           fileOut.close();
           System.out.println("Conta salva com sucesso em " + nomeArquivo);
       } catch (IOException e) {
           System.out.println("Erro ao salvar a conta: " + e.getMessage());
       }
   }
   public static Conta carregarDeArquivo(String nomeArquivo) {
       try {
           FileInputStream fileIn = new FileInputStream(nomeArquivo);
           ObjectInputStream in = new ObjectInputStream(fileIn);
           Conta conta = (Conta) in.readObject();
           // Fecha os streams
           in.close();
           fileIn.close();
           return conta;
       } catch (IOException | ClassNotFoundException e) {
           System.out.println("Erro ao carregar a conta: " + e.getMessage());
           return null;
       }
   }
   public static Conta carregarConta(String agencia, String numero) {
       String nomeArquivo = agencia + "-" + numero + ".ser";
       File arquivo = new File(nomeArquivo);


       // Verifica se o arquivo existe antes de tentar carregá-lo
       if (!arquivo.exists()) {
           System.out.println("Erro: O arquivo " + nomeArquivo + " não existe.");
           return null;
       }


       try (ObjectInputStream in = new ObjectInputStream(new FileInputStream(nomeArquivo))) {
           return (Conta) in.readObject();
       } catch (IOException | ClassNotFoundException e) {
           System.out.println("Erro ao carregar a conta: " + e.getMessage());
           return null;
       }
   }
}
